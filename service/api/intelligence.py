#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def forecast_xy(self, fn, x, y, h, v, course, dx, dy):
        """
        Parameters:
         - fn
         - x
         - y
         - h
         - v
         - course
         - dx
         - dy

        """
        pass

    def forecast_ll(self, fn, longi, lati, h, v, course, dlongi, dlati):
        """
        Parameters:
         - fn
         - longi
         - lati
         - h
         - v
         - course
         - dlongi
         - dlati

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def forecast_xy(self, fn, x, y, h, v, course, dx, dy):
        """
        Parameters:
         - fn
         - x
         - y
         - h
         - v
         - course
         - dx
         - dy

        """
        self.send_forecast_xy(fn, x, y, h, v, course, dx, dy)
        return self.recv_forecast_xy()

    def send_forecast_xy(self, fn, x, y, h, v, course, dx, dy):
        self._oprot.writeMessageBegin('forecast_xy', TMessageType.CALL, self._seqid)
        args = forecast_xy_args()
        args.fn = fn
        args.x = x
        args.y = y
        args.h = h
        args.v = v
        args.course = course
        args.dx = dx
        args.dy = dy
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_forecast_xy(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = forecast_xy_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "forecast_xy failed: unknown result")

    def forecast_ll(self, fn, longi, lati, h, v, course, dlongi, dlati):
        """
        Parameters:
         - fn
         - longi
         - lati
         - h
         - v
         - course
         - dlongi
         - dlati

        """
        self.send_forecast_ll(fn, longi, lati, h, v, course, dlongi, dlati)
        return self.recv_forecast_ll()

    def send_forecast_ll(self, fn, longi, lati, h, v, course, dlongi, dlati):
        self._oprot.writeMessageBegin('forecast_ll', TMessageType.CALL, self._seqid)
        args = forecast_ll_args()
        args.fn = fn
        args.longi = longi
        args.lati = lati
        args.h = h
        args.v = v
        args.course = course
        args.dlongi = dlongi
        args.dlati = dlati
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_forecast_ll(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = forecast_ll_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "forecast_ll failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["forecast_xy"] = Processor.process_forecast_xy
        self._processMap["forecast_ll"] = Processor.process_forecast_ll
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_forecast_xy(self, seqid, iprot, oprot):
        args = forecast_xy_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = forecast_xy_result()
        try:
            result.success = self._handler.forecast_xy(args.fn, args.x, args.y, args.h, args.v, args.course, args.dx, args.dy)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("forecast_xy", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_forecast_ll(self, seqid, iprot, oprot):
        args = forecast_ll_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = forecast_ll_result()
        try:
            result.success = self._handler.forecast_ll(args.fn, args.longi, args.lati, args.h, args.v, args.course, args.dlongi, args.dlati)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("forecast_ll", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class forecast_xy_args(object):
    """
    Attributes:
     - fn
     - x
     - y
     - h
     - v
     - course
     - dx
     - dy

    """


    def __init__(self, fn=None, x=None, y=None, h=None, v=None, course=None, dx=None, dy=None,):
        self.fn = fn
        self.x = x
        self.y = y
        self.h = h
        self.v = v
        self.course = course
        self.dx = dx
        self.dy = dy

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fn = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.y = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.h = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.v = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.course = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.dx = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.dy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('forecast_xy_args')
        if self.fn is not None:
            oprot.writeFieldBegin('fn', TType.STRING, 1)
            oprot.writeString(self.fn.encode('utf-8') if sys.version_info[0] == 2 else self.fn)
            oprot.writeFieldEnd()
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.DOUBLE, 2)
            oprot.writeDouble(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.DOUBLE, 3)
            oprot.writeDouble(self.y)
            oprot.writeFieldEnd()
        if self.h is not None:
            oprot.writeFieldBegin('h', TType.DOUBLE, 4)
            oprot.writeDouble(self.h)
            oprot.writeFieldEnd()
        if self.v is not None:
            oprot.writeFieldBegin('v', TType.DOUBLE, 5)
            oprot.writeDouble(self.v)
            oprot.writeFieldEnd()
        if self.course is not None:
            oprot.writeFieldBegin('course', TType.DOUBLE, 6)
            oprot.writeDouble(self.course)
            oprot.writeFieldEnd()
        if self.dx is not None:
            oprot.writeFieldBegin('dx', TType.DOUBLE, 7)
            oprot.writeDouble(self.dx)
            oprot.writeFieldEnd()
        if self.dy is not None:
            oprot.writeFieldBegin('dy', TType.DOUBLE, 8)
            oprot.writeDouble(self.dy)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(forecast_xy_args)
forecast_xy_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fn', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'x', None, None, ),  # 2
    (3, TType.DOUBLE, 'y', None, None, ),  # 3
    (4, TType.DOUBLE, 'h', None, None, ),  # 4
    (5, TType.DOUBLE, 'v', None, None, ),  # 5
    (6, TType.DOUBLE, 'course', None, None, ),  # 6
    (7, TType.DOUBLE, 'dx', None, None, ),  # 7
    (8, TType.DOUBLE, 'dy', None, None, ),  # 8
)


class forecast_xy_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('forecast_xy_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(forecast_xy_result)
forecast_xy_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class forecast_ll_args(object):
    """
    Attributes:
     - fn
     - longi
     - lati
     - h
     - v
     - course
     - dlongi
     - dlati

    """


    def __init__(self, fn=None, longi=None, lati=None, h=None, v=None, course=None, dlongi=None, dlati=None,):
        self.fn = fn
        self.longi = longi
        self.lati = lati
        self.h = h
        self.v = v
        self.course = course
        self.dlongi = dlongi
        self.dlati = dlati

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fn = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.longi = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.lati = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.h = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.v = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.course = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.dlongi = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.dlati = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('forecast_ll_args')
        if self.fn is not None:
            oprot.writeFieldBegin('fn', TType.STRING, 1)
            oprot.writeString(self.fn.encode('utf-8') if sys.version_info[0] == 2 else self.fn)
            oprot.writeFieldEnd()
        if self.longi is not None:
            oprot.writeFieldBegin('longi', TType.DOUBLE, 2)
            oprot.writeDouble(self.longi)
            oprot.writeFieldEnd()
        if self.lati is not None:
            oprot.writeFieldBegin('lati', TType.DOUBLE, 3)
            oprot.writeDouble(self.lati)
            oprot.writeFieldEnd()
        if self.h is not None:
            oprot.writeFieldBegin('h', TType.DOUBLE, 4)
            oprot.writeDouble(self.h)
            oprot.writeFieldEnd()
        if self.v is not None:
            oprot.writeFieldBegin('v', TType.DOUBLE, 5)
            oprot.writeDouble(self.v)
            oprot.writeFieldEnd()
        if self.course is not None:
            oprot.writeFieldBegin('course', TType.DOUBLE, 6)
            oprot.writeDouble(self.course)
            oprot.writeFieldEnd()
        if self.dlongi is not None:
            oprot.writeFieldBegin('dlongi', TType.DOUBLE, 7)
            oprot.writeDouble(self.dlongi)
            oprot.writeFieldEnd()
        if self.dlati is not None:
            oprot.writeFieldBegin('dlati', TType.DOUBLE, 8)
            oprot.writeDouble(self.dlati)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(forecast_ll_args)
forecast_ll_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fn', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'longi', None, None, ),  # 2
    (3, TType.DOUBLE, 'lati', None, None, ),  # 3
    (4, TType.DOUBLE, 'h', None, None, ),  # 4
    (5, TType.DOUBLE, 'v', None, None, ),  # 5
    (6, TType.DOUBLE, 'course', None, None, ),  # 6
    (7, TType.DOUBLE, 'dlongi', None, None, ),  # 7
    (8, TType.DOUBLE, 'dlati', None, None, ),  # 8
)


class forecast_ll_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('forecast_ll_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(forecast_ll_result)
forecast_ll_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)
fix_spec(all_structs)
del all_structs
