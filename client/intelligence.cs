/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public partial class intelligence
{
    public interface IAsync
    {
        global::System.Threading.Tasks.Task<double> forecast_xy(string fn, double x, double y, double h, double v, double course, double dx, double dy, CancellationToken cancellationToken = default);

        global::System.Threading.Tasks.Task<double> forecast_ll(string fn, double longi, double lati, double h, double v, double course, double dlongi, double dlati, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
        public Client(TProtocol protocol) : this(protocol, protocol)
        {
        }

        public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
        {
        }

        public async global::System.Threading.Tasks.Task<double> forecast_xy(string fn, double x, double y, double h, double v, double course, double dx, double dy, CancellationToken cancellationToken = default)
        {
            await send_forecast_xy(fn, x, y, h, v, course, dx, dy, cancellationToken);
            return await recv_forecast_xy(cancellationToken);
        }

        public async global::System.Threading.Tasks.Task send_forecast_xy(string fn, double x, double y, double h, double v, double course, double dx, double dy, CancellationToken cancellationToken = default)
        {
            await OutputProtocol.WriteMessageBeginAsync(new TMessage("forecast_xy", TMessageType.Call, SeqId), cancellationToken);

            var tmp0 = new InternalStructs.forecast_xy_args()
            {
                Fn = fn,
                X = x,
                Y = y,
                H = h,
                V = v,
                Course = course,
                Dx = dx,
                Dy = dy,
            };

            await tmp0.WriteAsync(OutputProtocol, cancellationToken);
            await OutputProtocol.WriteMessageEndAsync(cancellationToken);
            await OutputProtocol.Transport.FlushAsync(cancellationToken);
        }

        public async global::System.Threading.Tasks.Task<double> recv_forecast_xy(CancellationToken cancellationToken = default)
        {

            var tmp1 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
            if (tmp1.Type == TMessageType.Exception)
            {
                var tmp2 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                throw tmp2;
            }

            var tmp3 = new InternalStructs.forecast_xy_result();
            await tmp3.ReadAsync(InputProtocol, cancellationToken);
            await InputProtocol.ReadMessageEndAsync(cancellationToken);
            if (tmp3.__isset.success)
            {
                return tmp3.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forecast_xy failed: unknown result");
        }

        public async global::System.Threading.Tasks.Task<double> forecast_ll(string fn, double longi, double lati, double h, double v, double course, double dlongi, double dlati, CancellationToken cancellationToken = default)
        {
            await send_forecast_ll(fn, longi, lati, h, v, course, dlongi, dlati, cancellationToken);
            return await recv_forecast_ll(cancellationToken);
        }

        public async global::System.Threading.Tasks.Task send_forecast_ll(string fn, double longi, double lati, double h, double v, double course, double dlongi, double dlati, CancellationToken cancellationToken = default)
        {
            await OutputProtocol.WriteMessageBeginAsync(new TMessage("forecast_ll", TMessageType.Call, SeqId), cancellationToken);

            var tmp4 = new InternalStructs.forecast_ll_args()
            {
                Fn = fn,
                Longi = longi,
                Lati = lati,
                H = h,
                V = v,
                Course = course,
                Dlongi = dlongi,
                Dlati = dlati,
            };

            await tmp4.WriteAsync(OutputProtocol, cancellationToken);
            await OutputProtocol.WriteMessageEndAsync(cancellationToken);
            await OutputProtocol.Transport.FlushAsync(cancellationToken);
        }

        public async global::System.Threading.Tasks.Task<double> recv_forecast_ll(CancellationToken cancellationToken = default)
        {

            var tmp5 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
            if (tmp5.Type == TMessageType.Exception)
            {
                var tmp6 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                throw tmp6;
            }

            var tmp7 = new InternalStructs.forecast_ll_result();
            await tmp7.ReadAsync(InputProtocol, cancellationToken);
            await InputProtocol.ReadMessageEndAsync(cancellationToken);
            if (tmp7.__isset.success)
            {
                return tmp7.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forecast_ll failed: unknown result");
        }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
        private readonly IAsync _iAsync;
        private readonly ILogger<AsyncProcessor> _logger;

        public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
        {
            _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
            _logger = logger;
            processMap_["forecast_xy"] = forecast_xy_ProcessAsync;
            processMap_["forecast_ll"] = forecast_ll_ProcessAsync;
        }

        protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
        protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

        public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
        {
            return await ProcessAsync(iprot, oprot, CancellationToken.None);
        }

        public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
        {
            try
            {
                var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

                processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

                if (fn == null)
                {
                    await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
                    await iprot.ReadMessageEndAsync(cancellationToken);
                    var x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                    await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteMessageEndAsync(cancellationToken);
                    await oprot.Transport.FlushAsync(cancellationToken);
                    return true;
                }

                await fn(msg.SeqID, iprot, oprot, cancellationToken);

            }
            catch (IOException)
            {
                return false;
            }

            return true;
        }

        public async global::System.Threading.Tasks.Task forecast_xy_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
        {
            var tmp8 = new InternalStructs.forecast_xy_args();
            await tmp8.ReadAsync(iprot, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var tmp9 = new InternalStructs.forecast_xy_result();
            try
            {
                tmp9.Success = await _iAsync.forecast_xy(tmp8.Fn, tmp8.X, tmp8.Y, tmp8.H, tmp8.V, tmp8.Course, tmp8.Dx, tmp8.Dy, cancellationToken);
                await oprot.WriteMessageBeginAsync(new TMessage("forecast_xy", TMessageType.Reply, seqid), cancellationToken);
                await tmp9.WriteAsync(oprot, cancellationToken);
            }
            catch (TTransportException)
            {
                throw;
            }
            catch (Exception tmp10)
            {
                var tmp11 = $"Error occurred in {GetType().FullName}: {tmp10.Message}";
                if (_logger != null)
                    _logger.LogError(tmp10, tmp11);
                else
                    Console.Error.WriteLine(tmp11);
                var tmp12 = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                await oprot.WriteMessageBeginAsync(new TMessage("forecast_xy", TMessageType.Exception, seqid), cancellationToken);
                await tmp12.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
        }

        public async global::System.Threading.Tasks.Task forecast_ll_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
        {
            var tmp13 = new InternalStructs.forecast_ll_args();
            await tmp13.ReadAsync(iprot, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var tmp14 = new InternalStructs.forecast_ll_result();
            try
            {
                tmp14.Success = await _iAsync.forecast_ll(tmp13.Fn, tmp13.Longi, tmp13.Lati, tmp13.H, tmp13.V, tmp13.Course, tmp13.Dlongi, tmp13.Dlati, cancellationToken);
                await oprot.WriteMessageBeginAsync(new TMessage("forecast_ll", TMessageType.Reply, seqid), cancellationToken);
                await tmp14.WriteAsync(oprot, cancellationToken);
            }
            catch (TTransportException)
            {
                throw;
            }
            catch (Exception tmp15)
            {
                var tmp16 = $"Error occurred in {GetType().FullName}: {tmp15.Message}";
                if (_logger != null)
                    _logger.LogError(tmp15, tmp16);
                else
                    Console.Error.WriteLine(tmp16);
                var tmp17 = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                await oprot.WriteMessageBeginAsync(new TMessage("forecast_ll", TMessageType.Exception, seqid), cancellationToken);
                await tmp17.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
        }

    }

    public class InternalStructs
    {

        public partial class forecast_xy_args : TBase
        {
            private string _fn;
            private double _x;
            private double _y;
            private double _h;
            private double _v;
            private double _course;
            private double _dx;
            private double _dy;

            public string Fn
            {
                get
                {
                    return _fn;
                }
                set
                {
                    __isset.fn = true;
                    this._fn = value;
                }
            }

            public double X
            {
                get
                {
                    return _x;
                }
                set
                {
                    __isset.x = true;
                    this._x = value;
                }
            }

            public double Y
            {
                get
                {
                    return _y;
                }
                set
                {
                    __isset.y = true;
                    this._y = value;
                }
            }

            public double H
            {
                get
                {
                    return _h;
                }
                set
                {
                    __isset.h = true;
                    this._h = value;
                }
            }

            public double V
            {
                get
                {
                    return _v;
                }
                set
                {
                    __isset.v = true;
                    this._v = value;
                }
            }

            public double Course
            {
                get
                {
                    return _course;
                }
                set
                {
                    __isset.course = true;
                    this._course = value;
                }
            }

            public double Dx
            {
                get
                {
                    return _dx;
                }
                set
                {
                    __isset.dx = true;
                    this._dx = value;
                }
            }

            public double Dy
            {
                get
                {
                    return _dy;
                }
                set
                {
                    __isset.dy = true;
                    this._dy = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool fn;
                public bool x;
                public bool y;
                public bool h;
                public bool v;
                public bool course;
                public bool dx;
                public bool dy;
            }

            public forecast_xy_args()
            {
            }

            public forecast_xy_args DeepCopy()
            {
                var tmp18 = new forecast_xy_args();
                if ((Fn != null) && __isset.fn)
                {
                    tmp18.Fn = this.Fn;
                }
                tmp18.__isset.fn = this.__isset.fn;
                if (__isset.x)
                {
                    tmp18.X = this.X;
                }
                tmp18.__isset.x = this.__isset.x;
                if (__isset.y)
                {
                    tmp18.Y = this.Y;
                }
                tmp18.__isset.y = this.__isset.y;
                if (__isset.h)
                {
                    tmp18.H = this.H;
                }
                tmp18.__isset.h = this.__isset.h;
                if (__isset.v)
                {
                    tmp18.V = this.V;
                }
                tmp18.__isset.v = this.__isset.v;
                if (__isset.course)
                {
                    tmp18.Course = this.Course;
                }
                tmp18.__isset.course = this.__isset.course;
                if (__isset.dx)
                {
                    tmp18.Dx = this.Dx;
                }
                tmp18.__isset.dx = this.__isset.dx;
                if (__isset.dy)
                {
                    tmp18.Dy = this.Dy;
                }
                tmp18.__isset.dy = this.__isset.dy;
                return tmp18;
            }

            public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Fn = await iprot.ReadStringAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Double)
                                {
                                    X = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 3:
                                if (field.Type == TType.Double)
                                {
                                    Y = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 4:
                                if (field.Type == TType.Double)
                                {
                                    H = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 5:
                                if (field.Type == TType.Double)
                                {
                                    V = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 6:
                                if (field.Type == TType.Double)
                                {
                                    Course = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 7:
                                if (field.Type == TType.Double)
                                {
                                    Dx = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 8:
                                if (field.Type == TType.Double)
                                {
                                    Dy = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var tmp19 = new TStruct("forecast_xy_args");
                    await oprot.WriteStructBeginAsync(tmp19, cancellationToken);
                    var tmp20 = new TField();
                    if ((Fn != null) && __isset.fn)
                    {
                        tmp20.Name = "fn";
                        tmp20.Type = TType.String;
                        tmp20.ID = 1;
                        await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
                        await oprot.WriteStringAsync(Fn, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.x)
                    {
                        tmp20.Name = "x";
                        tmp20.Type = TType.Double;
                        tmp20.ID = 2;
                        await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
                        await oprot.WriteDoubleAsync(X, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.y)
                    {
                        tmp20.Name = "y";
                        tmp20.Type = TType.Double;
                        tmp20.ID = 3;
                        await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
                        await oprot.WriteDoubleAsync(Y, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.h)
                    {
                        tmp20.Name = "h";
                        tmp20.Type = TType.Double;
                        tmp20.ID = 4;
                        await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
                        await oprot.WriteDoubleAsync(H, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.v)
                    {
                        tmp20.Name = "v";
                        tmp20.Type = TType.Double;
                        tmp20.ID = 5;
                        await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
                        await oprot.WriteDoubleAsync(V, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.course)
                    {
                        tmp20.Name = "course";
                        tmp20.Type = TType.Double;
                        tmp20.ID = 6;
                        await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
                        await oprot.WriteDoubleAsync(Course, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.dx)
                    {
                        tmp20.Name = "dx";
                        tmp20.Type = TType.Double;
                        tmp20.ID = 7;
                        await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
                        await oprot.WriteDoubleAsync(Dx, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.dy)
                    {
                        tmp20.Name = "dy";
                        tmp20.Type = TType.Double;
                        tmp20.ID = 8;
                        await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
                        await oprot.WriteDoubleAsync(Dy, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                if (!(that is forecast_xy_args other)) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.fn == other.__isset.fn) && ((!__isset.fn) || (System.Object.Equals(Fn, other.Fn))))
                  && ((__isset.x == other.__isset.x) && ((!__isset.x) || (System.Object.Equals(X, other.X))))
                  && ((__isset.y == other.__isset.y) && ((!__isset.y) || (System.Object.Equals(Y, other.Y))))
                  && ((__isset.h == other.__isset.h) && ((!__isset.h) || (System.Object.Equals(H, other.H))))
                  && ((__isset.v == other.__isset.v) && ((!__isset.v) || (System.Object.Equals(V, other.V))))
                  && ((__isset.course == other.__isset.course) && ((!__isset.course) || (System.Object.Equals(Course, other.Course))))
                  && ((__isset.dx == other.__isset.dx) && ((!__isset.dx) || (System.Object.Equals(Dx, other.Dx))))
                  && ((__isset.dy == other.__isset.dy) && ((!__isset.dy) || (System.Object.Equals(Dy, other.Dy))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if ((Fn != null) && __isset.fn)
                    {
                        hashcode = (hashcode * 397) + Fn.GetHashCode();
                    }
                    if (__isset.x)
                    {
                        hashcode = (hashcode * 397) + X.GetHashCode();
                    }
                    if (__isset.y)
                    {
                        hashcode = (hashcode * 397) + Y.GetHashCode();
                    }
                    if (__isset.h)
                    {
                        hashcode = (hashcode * 397) + H.GetHashCode();
                    }
                    if (__isset.v)
                    {
                        hashcode = (hashcode * 397) + V.GetHashCode();
                    }
                    if (__isset.course)
                    {
                        hashcode = (hashcode * 397) + Course.GetHashCode();
                    }
                    if (__isset.dx)
                    {
                        hashcode = (hashcode * 397) + Dx.GetHashCode();
                    }
                    if (__isset.dy)
                    {
                        hashcode = (hashcode * 397) + Dy.GetHashCode();
                    }
                }
                return hashcode;
            }

            public override string ToString()
            {
                var tmp21 = new StringBuilder("forecast_xy_args(");
                int tmp22 = 0;
                if ((Fn != null) && __isset.fn)
                {
                    if (0 < tmp22++) { tmp21.Append(", "); }
                    tmp21.Append("Fn: ");
                    Fn.ToString(tmp21);
                }
                if (__isset.x)
                {
                    if (0 < tmp22++) { tmp21.Append(", "); }
                    tmp21.Append("X: ");
                    X.ToString(tmp21);
                }
                if (__isset.y)
                {
                    if (0 < tmp22++) { tmp21.Append(", "); }
                    tmp21.Append("Y: ");
                    Y.ToString(tmp21);
                }
                if (__isset.h)
                {
                    if (0 < tmp22++) { tmp21.Append(", "); }
                    tmp21.Append("H: ");
                    H.ToString(tmp21);
                }
                if (__isset.v)
                {
                    if (0 < tmp22++) { tmp21.Append(", "); }
                    tmp21.Append("V: ");
                    V.ToString(tmp21);
                }
                if (__isset.course)
                {
                    if (0 < tmp22++) { tmp21.Append(", "); }
                    tmp21.Append("Course: ");
                    Course.ToString(tmp21);
                }
                if (__isset.dx)
                {
                    if (0 < tmp22++) { tmp21.Append(", "); }
                    tmp21.Append("Dx: ");
                    Dx.ToString(tmp21);
                }
                if (__isset.dy)
                {
                    if (0 < tmp22++) { tmp21.Append(", "); }
                    tmp21.Append("Dy: ");
                    Dy.ToString(tmp21);
                }
                tmp21.Append(')');
                return tmp21.ToString();
            }
        }


        public partial class forecast_xy_result : TBase
        {
            private double _success;

            public double Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
            }

            public forecast_xy_result()
            {
            }

            public forecast_xy_result DeepCopy()
            {
                var tmp23 = new forecast_xy_result();
                if (__isset.success)
                {
                    tmp23.Success = this.Success;
                }
                tmp23.__isset.success = this.__isset.success;
                return tmp23;
            }

            public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Double)
                                {
                                    Success = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var tmp24 = new TStruct("forecast_xy_result");
                    await oprot.WriteStructBeginAsync(tmp24, cancellationToken);
                    var tmp25 = new TField();

                    if (this.__isset.success)
                    {
                        tmp25.Name = "Success";
                        tmp25.Type = TType.Double;
                        tmp25.ID = 0;
                        await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
                        await oprot.WriteDoubleAsync(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                if (!(that is forecast_xy_result other)) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                    {
                        hashcode = (hashcode * 397) + Success.GetHashCode();
                    }
                }
                return hashcode;
            }

            public override string ToString()
            {
                var tmp26 = new StringBuilder("forecast_xy_result(");
                int tmp27 = 0;
                if (__isset.success)
                {
                    if (0 < tmp27++) { tmp26.Append(", "); }
                    tmp26.Append("Success: ");
                    Success.ToString(tmp26);
                }
                tmp26.Append(')');
                return tmp26.ToString();
            }
        }


        public partial class forecast_ll_args : TBase
        {
            private string _fn;
            private double _longi;
            private double _lati;
            private double _h;
            private double _v;
            private double _course;
            private double _dlongi;
            private double _dlati;

            public string Fn
            {
                get
                {
                    return _fn;
                }
                set
                {
                    __isset.fn = true;
                    this._fn = value;
                }
            }

            public double Longi
            {
                get
                {
                    return _longi;
                }
                set
                {
                    __isset.longi = true;
                    this._longi = value;
                }
            }

            public double Lati
            {
                get
                {
                    return _lati;
                }
                set
                {
                    __isset.lati = true;
                    this._lati = value;
                }
            }

            public double H
            {
                get
                {
                    return _h;
                }
                set
                {
                    __isset.h = true;
                    this._h = value;
                }
            }

            public double V
            {
                get
                {
                    return _v;
                }
                set
                {
                    __isset.v = true;
                    this._v = value;
                }
            }

            public double Course
            {
                get
                {
                    return _course;
                }
                set
                {
                    __isset.course = true;
                    this._course = value;
                }
            }

            public double Dlongi
            {
                get
                {
                    return _dlongi;
                }
                set
                {
                    __isset.dlongi = true;
                    this._dlongi = value;
                }
            }

            public double Dlati
            {
                get
                {
                    return _dlati;
                }
                set
                {
                    __isset.dlati = true;
                    this._dlati = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool fn;
                public bool longi;
                public bool lati;
                public bool h;
                public bool v;
                public bool course;
                public bool dlongi;
                public bool dlati;
            }

            public forecast_ll_args()
            {
            }

            public forecast_ll_args DeepCopy()
            {
                var tmp28 = new forecast_ll_args();
                if ((Fn != null) && __isset.fn)
                {
                    tmp28.Fn = this.Fn;
                }
                tmp28.__isset.fn = this.__isset.fn;
                if (__isset.longi)
                {
                    tmp28.Longi = this.Longi;
                }
                tmp28.__isset.longi = this.__isset.longi;
                if (__isset.lati)
                {
                    tmp28.Lati = this.Lati;
                }
                tmp28.__isset.lati = this.__isset.lati;
                if (__isset.h)
                {
                    tmp28.H = this.H;
                }
                tmp28.__isset.h = this.__isset.h;
                if (__isset.v)
                {
                    tmp28.V = this.V;
                }
                tmp28.__isset.v = this.__isset.v;
                if (__isset.course)
                {
                    tmp28.Course = this.Course;
                }
                tmp28.__isset.course = this.__isset.course;
                if (__isset.dlongi)
                {
                    tmp28.Dlongi = this.Dlongi;
                }
                tmp28.__isset.dlongi = this.__isset.dlongi;
                if (__isset.dlati)
                {
                    tmp28.Dlati = this.Dlati;
                }
                tmp28.__isset.dlati = this.__isset.dlati;
                return tmp28;
            }

            public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Fn = await iprot.ReadStringAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Double)
                                {
                                    Longi = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 3:
                                if (field.Type == TType.Double)
                                {
                                    Lati = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 4:
                                if (field.Type == TType.Double)
                                {
                                    H = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 5:
                                if (field.Type == TType.Double)
                                {
                                    V = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 6:
                                if (field.Type == TType.Double)
                                {
                                    Course = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 7:
                                if (field.Type == TType.Double)
                                {
                                    Dlongi = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 8:
                                if (field.Type == TType.Double)
                                {
                                    Dlati = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var tmp29 = new TStruct("forecast_ll_args");
                    await oprot.WriteStructBeginAsync(tmp29, cancellationToken);
                    var tmp30 = new TField();
                    if ((Fn != null) && __isset.fn)
                    {
                        tmp30.Name = "fn";
                        tmp30.Type = TType.String;
                        tmp30.ID = 1;
                        await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
                        await oprot.WriteStringAsync(Fn, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.longi)
                    {
                        tmp30.Name = "longi";
                        tmp30.Type = TType.Double;
                        tmp30.ID = 2;
                        await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
                        await oprot.WriteDoubleAsync(Longi, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.lati)
                    {
                        tmp30.Name = "lati";
                        tmp30.Type = TType.Double;
                        tmp30.ID = 3;
                        await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
                        await oprot.WriteDoubleAsync(Lati, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.h)
                    {
                        tmp30.Name = "h";
                        tmp30.Type = TType.Double;
                        tmp30.ID = 4;
                        await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
                        await oprot.WriteDoubleAsync(H, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.v)
                    {
                        tmp30.Name = "v";
                        tmp30.Type = TType.Double;
                        tmp30.ID = 5;
                        await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
                        await oprot.WriteDoubleAsync(V, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.course)
                    {
                        tmp30.Name = "course";
                        tmp30.Type = TType.Double;
                        tmp30.ID = 6;
                        await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
                        await oprot.WriteDoubleAsync(Course, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.dlongi)
                    {
                        tmp30.Name = "dlongi";
                        tmp30.Type = TType.Double;
                        tmp30.ID = 7;
                        await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
                        await oprot.WriteDoubleAsync(Dlongi, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.dlati)
                    {
                        tmp30.Name = "dlati";
                        tmp30.Type = TType.Double;
                        tmp30.ID = 8;
                        await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
                        await oprot.WriteDoubleAsync(Dlati, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                if (!(that is forecast_ll_args other)) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.fn == other.__isset.fn) && ((!__isset.fn) || (System.Object.Equals(Fn, other.Fn))))
                  && ((__isset.longi == other.__isset.longi) && ((!__isset.longi) || (System.Object.Equals(Longi, other.Longi))))
                  && ((__isset.lati == other.__isset.lati) && ((!__isset.lati) || (System.Object.Equals(Lati, other.Lati))))
                  && ((__isset.h == other.__isset.h) && ((!__isset.h) || (System.Object.Equals(H, other.H))))
                  && ((__isset.v == other.__isset.v) && ((!__isset.v) || (System.Object.Equals(V, other.V))))
                  && ((__isset.course == other.__isset.course) && ((!__isset.course) || (System.Object.Equals(Course, other.Course))))
                  && ((__isset.dlongi == other.__isset.dlongi) && ((!__isset.dlongi) || (System.Object.Equals(Dlongi, other.Dlongi))))
                  && ((__isset.dlati == other.__isset.dlati) && ((!__isset.dlati) || (System.Object.Equals(Dlati, other.Dlati))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if ((Fn != null) && __isset.fn)
                    {
                        hashcode = (hashcode * 397) + Fn.GetHashCode();
                    }
                    if (__isset.longi)
                    {
                        hashcode = (hashcode * 397) + Longi.GetHashCode();
                    }
                    if (__isset.lati)
                    {
                        hashcode = (hashcode * 397) + Lati.GetHashCode();
                    }
                    if (__isset.h)
                    {
                        hashcode = (hashcode * 397) + H.GetHashCode();
                    }
                    if (__isset.v)
                    {
                        hashcode = (hashcode * 397) + V.GetHashCode();
                    }
                    if (__isset.course)
                    {
                        hashcode = (hashcode * 397) + Course.GetHashCode();
                    }
                    if (__isset.dlongi)
                    {
                        hashcode = (hashcode * 397) + Dlongi.GetHashCode();
                    }
                    if (__isset.dlati)
                    {
                        hashcode = (hashcode * 397) + Dlati.GetHashCode();
                    }
                }
                return hashcode;
            }

            public override string ToString()
            {
                var tmp31 = new StringBuilder("forecast_ll_args(");
                int tmp32 = 0;
                if ((Fn != null) && __isset.fn)
                {
                    if (0 < tmp32++) { tmp31.Append(", "); }
                    tmp31.Append("Fn: ");
                    Fn.ToString(tmp31);
                }
                if (__isset.longi)
                {
                    if (0 < tmp32++) { tmp31.Append(", "); }
                    tmp31.Append("Longi: ");
                    Longi.ToString(tmp31);
                }
                if (__isset.lati)
                {
                    if (0 < tmp32++) { tmp31.Append(", "); }
                    tmp31.Append("Lati: ");
                    Lati.ToString(tmp31);
                }
                if (__isset.h)
                {
                    if (0 < tmp32++) { tmp31.Append(", "); }
                    tmp31.Append("H: ");
                    H.ToString(tmp31);
                }
                if (__isset.v)
                {
                    if (0 < tmp32++) { tmp31.Append(", "); }
                    tmp31.Append("V: ");
                    V.ToString(tmp31);
                }
                if (__isset.course)
                {
                    if (0 < tmp32++) { tmp31.Append(", "); }
                    tmp31.Append("Course: ");
                    Course.ToString(tmp31);
                }
                if (__isset.dlongi)
                {
                    if (0 < tmp32++) { tmp31.Append(", "); }
                    tmp31.Append("Dlongi: ");
                    Dlongi.ToString(tmp31);
                }
                if (__isset.dlati)
                {
                    if (0 < tmp32++) { tmp31.Append(", "); }
                    tmp31.Append("Dlati: ");
                    Dlati.ToString(tmp31);
                }
                tmp31.Append(')');
                return tmp31.ToString();
            }
        }


        public partial class forecast_ll_result : TBase
        {
            private double _success;

            public double Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            public struct Isset
            {
                public bool success;
            }

            public forecast_ll_result()
            {
            }

            public forecast_ll_result DeepCopy()
            {
                var tmp33 = new forecast_ll_result();
                if (__isset.success)
                {
                    tmp33.Success = this.Success;
                }
                tmp33.__isset.success = this.__isset.success;
                return tmp33;
            }

            public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Double)
                                {
                                    Success = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default:
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var tmp34 = new TStruct("forecast_ll_result");
                    await oprot.WriteStructBeginAsync(tmp34, cancellationToken);
                    var tmp35 = new TField();

                    if (this.__isset.success)
                    {
                        tmp35.Name = "Success";
                        tmp35.Type = TType.Double;
                        tmp35.ID = 0;
                        await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
                        await oprot.WriteDoubleAsync(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override bool Equals(object that)
            {
                if (!(that is forecast_ll_result other)) return false;
                if (ReferenceEquals(this, other)) return true;
                return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
            }

            public override int GetHashCode()
            {
                int hashcode = 157;
                unchecked
                {
                    if (__isset.success)
                    {
                        hashcode = (hashcode * 397) + Success.GetHashCode();
                    }
                }
                return hashcode;
            }

            public override string ToString()
            {
                var tmp36 = new StringBuilder("forecast_ll_result(");
                int tmp37 = 0;
                if (__isset.success)
                {
                    if (0 < tmp37++) { tmp36.Append(", "); }
                    tmp36.Append("Success: ");
                    Success.ToString(tmp36);
                }
                tmp36.Append(')');
                return tmp36.ToString();
            }
        }

    }

}
