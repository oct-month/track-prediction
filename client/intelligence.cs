/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class intelligence {
  public interface ISync {
    double forecast_xy(string fn, double x, double y, double h, double v, double course, double dx, double dy);
    double forecast_ll(string fn, double longi, double lati, double h, double v, double course, double dlongi, double dlati);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_forecast_xy(AsyncCallback callback, object state, string fn, double x, double y, double h, double v, double course, double dx, double dy);
    double End_forecast_xy(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_forecast_ll(AsyncCallback callback, object state, string fn, double longi, double lati, double h, double v, double course, double dlongi, double dlati);
    double End_forecast_ll(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_forecast_xy(AsyncCallback callback, object state, string fn, double x, double y, double h, double v, double course, double dx, double dy)
    {
      return send_forecast_xy(callback, state, fn, x, y, h, v, course, dx, dy);
    }

    public double End_forecast_xy(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_forecast_xy();
    }

    #endif

    public double forecast_xy(string fn, double x, double y, double h, double v, double course, double dx, double dy)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_forecast_xy(null, null, fn, x, y, h, v, course, dx, dy);
      return End_forecast_xy(asyncResult);

      #else
      send_forecast_xy(fn, x, y, h, v, course, dx, dy);
      return recv_forecast_xy();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_forecast_xy(AsyncCallback callback, object state, string fn, double x, double y, double h, double v, double course, double dx, double dy)
    {
      oprot_.WriteMessageBegin(new TMessage("forecast_xy", TMessageType.Call, seqid_));
      forecast_xy_args args = new forecast_xy_args();
      args.Fn = fn;
      args.X = x;
      args.Y = y;
      args.H = h;
      args.V = v;
      args.Course = course;
      args.Dx = dx;
      args.Dy = dy;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_forecast_xy(string fn, double x, double y, double h, double v, double course, double dx, double dy)
    {
      oprot_.WriteMessageBegin(new TMessage("forecast_xy", TMessageType.Call, seqid_));
      forecast_xy_args args = new forecast_xy_args();
      args.Fn = fn;
      args.X = x;
      args.Y = y;
      args.H = h;
      args.V = v;
      args.Course = course;
      args.Dx = dx;
      args.Dy = dy;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public double recv_forecast_xy()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      forecast_xy_result result = new forecast_xy_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forecast_xy failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_forecast_ll(AsyncCallback callback, object state, string fn, double longi, double lati, double h, double v, double course, double dlongi, double dlati)
    {
      return send_forecast_ll(callback, state, fn, longi, lati, h, v, course, dlongi, dlati);
    }

    public double End_forecast_ll(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_forecast_ll();
    }

    #endif

    public double forecast_ll(string fn, double longi, double lati, double h, double v, double course, double dlongi, double dlati)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_forecast_ll(null, null, fn, longi, lati, h, v, course, dlongi, dlati);
      return End_forecast_ll(asyncResult);

      #else
      send_forecast_ll(fn, longi, lati, h, v, course, dlongi, dlati);
      return recv_forecast_ll();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_forecast_ll(AsyncCallback callback, object state, string fn, double longi, double lati, double h, double v, double course, double dlongi, double dlati)
    {
      oprot_.WriteMessageBegin(new TMessage("forecast_ll", TMessageType.Call, seqid_));
      forecast_ll_args args = new forecast_ll_args();
      args.Fn = fn;
      args.Longi = longi;
      args.Lati = lati;
      args.H = h;
      args.V = v;
      args.Course = course;
      args.Dlongi = dlongi;
      args.Dlati = dlati;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_forecast_ll(string fn, double longi, double lati, double h, double v, double course, double dlongi, double dlati)
    {
      oprot_.WriteMessageBegin(new TMessage("forecast_ll", TMessageType.Call, seqid_));
      forecast_ll_args args = new forecast_ll_args();
      args.Fn = fn;
      args.Longi = longi;
      args.Lati = lati;
      args.H = h;
      args.V = v;
      args.Course = course;
      args.Dlongi = dlongi;
      args.Dlati = dlati;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public double recv_forecast_ll()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      forecast_ll_result result = new forecast_ll_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "forecast_ll failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["forecast_xy"] = forecast_xy_Process;
      processMap_["forecast_ll"] = forecast_ll_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void forecast_xy_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      forecast_xy_args args = new forecast_xy_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      forecast_xy_result result = new forecast_xy_result();
      try
      {
        result.Success = iface_.forecast_xy(args.Fn, args.X, args.Y, args.H, args.V, args.Course, args.Dx, args.Dy);
        oprot.WriteMessageBegin(new TMessage("forecast_xy", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("forecast_xy", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void forecast_ll_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      forecast_ll_args args = new forecast_ll_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      forecast_ll_result result = new forecast_ll_result();
      try
      {
        result.Success = iface_.forecast_ll(args.Fn, args.Longi, args.Lati, args.H, args.V, args.Course, args.Dlongi, args.Dlati);
        oprot.WriteMessageBegin(new TMessage("forecast_ll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("forecast_ll", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class forecast_xy_args : TBase
  {
    private string _fn;
    private double _x;
    private double _y;
    private double _h;
    private double _v;
    private double _course;
    private double _dx;
    private double _dy;

    public string Fn
    {
      get
      {
        return _fn;
      }
      set
      {
        __isset.fn = true;
        this._fn = value;
      }
    }

    public double X
    {
      get
      {
        return _x;
      }
      set
      {
        __isset.x = true;
        this._x = value;
      }
    }

    public double Y
    {
      get
      {
        return _y;
      }
      set
      {
        __isset.y = true;
        this._y = value;
      }
    }

    public double H
    {
      get
      {
        return _h;
      }
      set
      {
        __isset.h = true;
        this._h = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double Course
    {
      get
      {
        return _course;
      }
      set
      {
        __isset.course = true;
        this._course = value;
      }
    }

    public double Dx
    {
      get
      {
        return _dx;
      }
      set
      {
        __isset.dx = true;
        this._dx = value;
      }
    }

    public double Dy
    {
      get
      {
        return _dy;
      }
      set
      {
        __isset.dy = true;
        this._dy = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool fn;
      public bool x;
      public bool y;
      public bool h;
      public bool v;
      public bool course;
      public bool dx;
      public bool dy;
    }

    public forecast_xy_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Fn = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                X = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                Y = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                H = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Double) {
                Course = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Double) {
                Dx = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Double) {
                Dy = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("forecast_xy_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Fn != null && __isset.fn) {
          field.Name = "fn";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Fn);
          oprot.WriteFieldEnd();
        }
        if (__isset.x) {
          field.Name = "x";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(X);
          oprot.WriteFieldEnd();
        }
        if (__isset.y) {
          field.Name = "y";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Y);
          oprot.WriteFieldEnd();
        }
        if (__isset.h) {
          field.Name = "h";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(H);
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.course) {
          field.Name = "course";
          field.Type = TType.Double;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Course);
          oprot.WriteFieldEnd();
        }
        if (__isset.dx) {
          field.Name = "dx";
          field.Type = TType.Double;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Dx);
          oprot.WriteFieldEnd();
        }
        if (__isset.dy) {
          field.Name = "dy";
          field.Type = TType.Double;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Dy);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("forecast_xy_args(");
      bool __first = true;
      if (Fn != null && __isset.fn) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fn: ");
        __sb.Append(Fn);
      }
      if (__isset.x) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("X: ");
        __sb.Append(X);
      }
      if (__isset.y) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Y: ");
        __sb.Append(Y);
      }
      if (__isset.h) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("H: ");
        __sb.Append(H);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.course) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Course: ");
        __sb.Append(Course);
      }
      if (__isset.dx) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dx: ");
        __sb.Append(Dx);
      }
      if (__isset.dy) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dy: ");
        __sb.Append(Dy);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class forecast_xy_result : TBase
  {
    private double _success;

    public double Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public forecast_xy_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Double) {
                Success = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("forecast_xy_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Double;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("forecast_xy_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class forecast_ll_args : TBase
  {
    private string _fn;
    private double _longi;
    private double _lati;
    private double _h;
    private double _v;
    private double _course;
    private double _dlongi;
    private double _dlati;

    public string Fn
    {
      get
      {
        return _fn;
      }
      set
      {
        __isset.fn = true;
        this._fn = value;
      }
    }

    public double Longi
    {
      get
      {
        return _longi;
      }
      set
      {
        __isset.longi = true;
        this._longi = value;
      }
    }

    public double Lati
    {
      get
      {
        return _lati;
      }
      set
      {
        __isset.lati = true;
        this._lati = value;
      }
    }

    public double H
    {
      get
      {
        return _h;
      }
      set
      {
        __isset.h = true;
        this._h = value;
      }
    }

    public double V
    {
      get
      {
        return _v;
      }
      set
      {
        __isset.v = true;
        this._v = value;
      }
    }

    public double Course
    {
      get
      {
        return _course;
      }
      set
      {
        __isset.course = true;
        this._course = value;
      }
    }

    public double Dlongi
    {
      get
      {
        return _dlongi;
      }
      set
      {
        __isset.dlongi = true;
        this._dlongi = value;
      }
    }

    public double Dlati
    {
      get
      {
        return _dlati;
      }
      set
      {
        __isset.dlati = true;
        this._dlati = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool fn;
      public bool longi;
      public bool lati;
      public bool h;
      public bool v;
      public bool course;
      public bool dlongi;
      public bool dlati;
    }

    public forecast_ll_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Fn = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                Longi = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                Lati = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                H = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                V = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Double) {
                Course = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Double) {
                Dlongi = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Double) {
                Dlati = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("forecast_ll_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Fn != null && __isset.fn) {
          field.Name = "fn";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Fn);
          oprot.WriteFieldEnd();
        }
        if (__isset.longi) {
          field.Name = "longi";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Longi);
          oprot.WriteFieldEnd();
        }
        if (__isset.lati) {
          field.Name = "lati";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Lati);
          oprot.WriteFieldEnd();
        }
        if (__isset.h) {
          field.Name = "h";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(H);
          oprot.WriteFieldEnd();
        }
        if (__isset.v) {
          field.Name = "v";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V);
          oprot.WriteFieldEnd();
        }
        if (__isset.course) {
          field.Name = "course";
          field.Type = TType.Double;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Course);
          oprot.WriteFieldEnd();
        }
        if (__isset.dlongi) {
          field.Name = "dlongi";
          field.Type = TType.Double;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Dlongi);
          oprot.WriteFieldEnd();
        }
        if (__isset.dlati) {
          field.Name = "dlati";
          field.Type = TType.Double;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Dlati);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("forecast_ll_args(");
      bool __first = true;
      if (Fn != null && __isset.fn) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fn: ");
        __sb.Append(Fn);
      }
      if (__isset.longi) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Longi: ");
        __sb.Append(Longi);
      }
      if (__isset.lati) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Lati: ");
        __sb.Append(Lati);
      }
      if (__isset.h) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("H: ");
        __sb.Append(H);
      }
      if (__isset.v) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V: ");
        __sb.Append(V);
      }
      if (__isset.course) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Course: ");
        __sb.Append(Course);
      }
      if (__isset.dlongi) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dlongi: ");
        __sb.Append(Dlongi);
      }
      if (__isset.dlati) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dlati: ");
        __sb.Append(Dlati);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class forecast_ll_result : TBase
  {
    private double _success;

    public double Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public forecast_ll_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Double) {
                Success = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("forecast_ll_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Double;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("forecast_ll_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
